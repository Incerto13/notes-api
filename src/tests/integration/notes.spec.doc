import { INestApplication } from '@nestjs/common';
import { Test } from '@nestjs/testing';
import { TypeOrmModule } from '@nestjs/typeorm';
import * as supertest from 'supertest';
import { Repository } from 'typeorm';

import { Note } from '../../notes/note.entity';
import { NotesModule } from '../../notes/notes.module';
import { NotesRepository } from '../../notes/notes.repository';

describe('Notes', () => {
  let app: INestApplication;
  let repository: Repository<Note>;

  beforeAll(async () => {
    const module = await Test.createTestingModule({
      imports: [
        NotesModule,
        TypeOrmModule.forRoot({
          type: 'postgres',
          host: 'localhost',
          port: 5432,
          username: 'postgres',
          password: 'postgres',
          database: 'test-int', 
          autoLoadEntities: true,
          // entities: [Note ],
          synchronize: false,
        }),
      ],
    }).compile();

    app = module.createNestApplication();
    repository = module.get('NotesRepository');
    await app.init();
  });

  afterEach(async () => {
    await repository.query(`DELETE FROM notes;`);
  });

  afterAll(async () => {
    await app.close();
  });

  // describe('GET /notes', () => {
  //   it('should return an array of notes', async () => {
  //     // await repository.save([{ value: 'test-name-0' }, { value: 'test-name-1' }]);
  //     const { body } = await supertest
  //       .agent(app.getHttpServer())
  //       .get('/notes')
  //       .set('Accept', 'application/json')
  //       .expect('Content-Type', /json/)
  //       .expect(200);
      
  //     expect(JSON.parse(JSON.stringify(body))).toEqual([
  //         { id: expect.any(String), value: 'test-name-0' },
  //         { id: expect.any(String), value: 'test-name-1' },
  //       ])

  //     // expect(body).toEqual([
  //     //   { id: expect.any(String), value: 'test-name-0' },
  //     //   { id: expect.any(String), value: 'test-name-1' },
  //     // ]);
  //   });
  // });

  describe('POST /notes', () => {
    it('should return a note', async () => {
      const { body } = await supertest
        .agent(app.getHttpServer())
        .post('/notes')
        .set('Accept', 'application/json')
        .send({ value: 'test-post' })
        .expect('Content-Type', /json/)
        .expect(201);

      // expect(body).toEqual({ id: expect.any(String), value: 'test-post' });
      expect(1).toEqual(1)
    });

  //   it('should create a note is the DB', async () => {
  //     await expect(repository.findAndCount()).resolves.toEqual([[], 0]);
  //     await supertest
  //       .agent(app.getHttpServer())
  //       .post('/notes')
  //       .set('Accept', 'application/json')
  //       .send({ name: 'test-name' })
  //       .expect('Content-Type', /json/)
  //       .expect(201);
  //     await expect(repository.findAndCount()).resolves.toEqual([
  //       [{ id: expect.any(String), value: 'test-name' }],
  //       1,
  //     ]);
  //   });

  //   it('should handle a missing value', async () => {
  //     await supertest
  //       .agent(app.getHttpServer())
  //       .post('/notes')
  //       .set('Accept', 'application/json')
  //       .send({ none: 'test-none' })
  //       .expect('Content-Type', /json/)
  //       .expect(500);
  //   });
  // });
// });

});

});